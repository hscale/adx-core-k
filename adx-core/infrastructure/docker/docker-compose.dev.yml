version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: adx-postgres
    environment:
      POSTGRES_DB: adx_core
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: adx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server
  # temporal:
  #   image: temporalio/auto-setup:latest
  #   container_name: adx-temporal
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - DB=postgres12
  #     - DB_PORT=5432
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PWD=postgres
  #     - POSTGRES_SEEDS=adx-postgres
  #     - POSTGRES_DATABASE=adx_core
  #     - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
  #   ports:
  #     - "7233:7233"
  #   volumes:
  #     - ./temporal-config:/etc/temporal/config/dynamicconfig
  #   healthcheck:
  #     test: ["CMD", "tctl", "--address", "temporal:7233", "workflow", "list"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # # Temporal UI
  # temporal-ui:
  #   image: temporalio/ui:latest
  #   container_name: adx-temporal-ui
  #   depends_on:
  #     temporal:
  #       condition: service_healthy
  #   environment:
  #     - TEMPORAL_GRPC_ENDPOINT=temporal:7233
  #     - TEMPORAL_PERMIT_WRITE_API=true
  #   ports:
  #     - "8088:8088"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: adx-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: adx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: adx-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: adx-network