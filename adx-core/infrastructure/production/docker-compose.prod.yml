# ADX Core Production Docker Compose Configuration
version: '3.8'

networks:
  adx-core-prod:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  temporal_data:
  prometheus_data:
  grafana_data:

services:
  # Database Services
  postgres:
    image: postgres:14-alpine
    container_name: adx-core-postgres-prod
    environment:
      POSTGRES_DB: adx_core_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - adx-core-prod
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d adx_core_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: adx-core-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - adx-core-prod
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Temporal Services
  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: adx-core-temporal-prod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    networks:
      - adx-core-prod
    ports:
      - "7233:7233"
      - "8088:8088"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services
  api-gateway:
    build:
      context: ../../
      dockerfile: services/api-gateway/Dockerfile.prod
    container_name: adx-core-api-gateway-prod
    depends_on:
      - postgres
      - redis
      - temporal
    environment:
      - RUST_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/adx_core_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - TEMPORAL_SERVER_URL=temporal:7233
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8080
    networks:
      - adx-core-prod
    ports:
      - "8080:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: ../../
      dockerfile: services/auth-service/Dockerfile.prod
    container_name: adx-core-auth-service-prod
    depends_on:
      - postgres
      - redis
      - temporal
    environment:
      - RUST_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/adx_core_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - TEMPORAL_SERVER_URL=temporal:7233
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8081
    networks:
      - adx-core-prod
    ports:
      - "8081:8081"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ../../
      dockerfile: services/user-service/Dockerfile.prod
    container_name: adx-core-user-service-prod
    depends_on:
      - postgres
      - redis
      - temporal
    environment:
      - RUST_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/adx_core_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - TEMPORAL_SERVER_URL=temporal:7233
      - PORT=8082
    networks:
      - adx-core-prod
    ports:
      - "8082:8082"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  file-service:
    build:
      context: ../../
      dockerfile: services/file-service/Dockerfile.prod
    container_name: adx-core-file-service-prod
    depends_on:
      - postgres
      - redis
      - temporal
    environment:
      - RUST_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/adx_core_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - TEMPORAL_SERVER_URL=temporal:7233
      - PORT=8083
      - STORAGE_PROVIDER=${STORAGE_PROVIDER:-local}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
    networks:
      - adx-core-prod
    ports:
      - "8083:8083"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  tenant-service:
    build:
      context: ../../
      dockerfile: services/tenant-service/Dockerfile.prod
    container_name: adx-core-tenant-service-prod
    depends_on:
      - postgres
      - redis
      - temporal
    environment:
      - RUST_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/adx_core_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - TEMPORAL_SERVER_URL=temporal:7233
      - PORT=8085
    networks:
      - adx-core-prod
    ports:
      - "8085:8085"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  workflow-service:
    build:
      context: ../../
      dockerfile: services/workflow-service/Dockerfile.prod
    container_name: adx-core-workflow-service-prod
    depends_on:
      - postgres
      - redis
      - temporal
    environment:
      - RUST_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/adx_core_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - TEMPORAL_SERVER_URL=temporal:7233
      - PORT=8084
    networks:
      - adx-core-prod
    ports:
      - "8084:8084"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: adx-core-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - adx-core-prod
      - monitoring
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: adx-core-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    ports:
      - "3001:3000"
    restart: unless-stopped

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: adx-core-loki-prod
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - monitoring
    ports:
      - "3100:3100"
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: adx-core-promtail-prod
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: adx-core-nginx-prod
    depends_on:
      - api-gateway
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - adx-core-prod
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped