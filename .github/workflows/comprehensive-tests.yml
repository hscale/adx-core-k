# Comprehensive testing workflow for ADX CORE
name: Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: adx_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          adx-core/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Node dependencies
      run: npm ci
    
    - name: Run database migrations
      run: |
        cd adx-core
        cargo install sqlx-cli --no-default-features --features postgres
        sqlx migrate run
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/adx_core_test
    
    - name: Run Rust unit tests
      run: |
        cd adx-core
        cargo test --workspace --lib
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/adx_core_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run frontend unit tests
      run: npm run test:unit
    
    - name: Run Rust linting
      run: |
        cd adx-core
        cargo clippy --workspace -- -D warnings
        cargo fmt --all -- --check

  workflow-tests:
    name: Temporal Workflow Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: adx_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      temporal:
        image: temporalio/auto-setup:latest
        env:
          - DB=postgresql
          - DB_PORT=5432
          - POSTGRES_USER=postgres
          - POSTGRES_PWD=postgres
          - POSTGRES_SEEDS=postgres
        ports:
          - 7233:7233
          - 8088:8088
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          adx-core/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for Temporal
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8088; do sleep 2; done'
    
    - name: Run workflow tests
      run: npm run test:workflow
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/adx_core_test
        TEMPORAL_SERVER_URL: localhost:7233

  integration-tests:
    name: Cross-Service Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          tests/target
        key: ${{ runner.os }}-cargo-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Set up Docker Compose
      run: |
        cd adx-core
        docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
        sleep 60  # Wait for services to start
    
    - name: Run integration tests
      run: npm run test:cross-service
      env:
        TEST_MODE: integration
    
    - name: Tear down services
      run: |
        cd adx-core
        docker-compose -f infrastructure/docker/docker-compose.dev.yml down

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - name: Start test environment
      run: |
        cd adx-core
        docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
        sleep 90  # Wait for services to start
    
    - name: Start frontend applications
      run: |
        npm run dev:all &
        sleep 60  # Wait for frontends to start
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: test-results/
        retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          tests/target
        key: ${{ runner.os }}-cargo-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Start test environment
      run: |
        cd adx-core
        docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
        sleep 90  # Wait for services to start
    
    - name: Run performance tests
      run: npm run test:performance
      env:
        RUN_PERFORMANCE_TESTS: 1
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: load_test_report.md
        retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          tests/target
        key: ${{ runner.os }}-cargo-tests-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Start test environment
      run: |
        cd adx-core
        docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
        sleep 90  # Wait for services to start
    
    - name: Run security tests
      run: npm run test:security
      env:
        RUN_SECURITY_TESTS: 1
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security_test_report.json
        retention-days: 30

  comprehensive-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [unit-tests, workflow-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start test environment
      run: |
        cd adx-core
        docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
        sleep 90  # Wait for services to start
    
    - name: Run comprehensive test suite
      run: npm run test:all
      continue-on-error: true
    
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: test-results/
        retention-days: 30
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('test-results/comprehensive-report.json', 'utf8');
            const results = JSON.parse(report);
            
            let comment = '## 🧪 Test Results\n\n';
            comment += `**Duration:** ${results.total_duration}s\n`;
            comment += `**Failed Suites:** ${results.failed_suites.length}\n\n`;
            
            if (results.failed_suites.length === 0) {
              comment += '✅ All tests passed!\n';
            } else {
              comment += '❌ Some tests failed:\n';
              results.failed_suites.forEach(suite => {
                comment += `- ${suite}\n`;
              });
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read test results:', error);
          }